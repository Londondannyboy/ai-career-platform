import { NextRequest, NextResponse } from 'next/server';
import { auth, currentUser } from '@clerk/nextjs/server';
import { sql } from '@/lib/db';

export async function POST(request: NextRequest) {
  try {
    // Get user ID - try multiple methods
    let userId = null;
    
    // Method 1: Try auth() first
    try {
      const authResult = await auth();
      userId = authResult.userId;
      console.log('Auth method 1 result:', userId ? 'Found user' : 'No user');
    } catch (e: any) {
      console.log('Auth method 1 failed:', e?.message || 'Unknown error');
    }
    
    // Method 2: Try currentUser() if auth() failed
    if (!userId) {
      try {
        const user = await currentUser();
        userId = user?.id;
        console.log('Auth method 2 result:', userId ? 'Found user' : 'No user');
      } catch (e: any) {
        console.log('Auth method 2 failed:', e?.message || 'Unknown error');
      }
    }
    
    // Method 3: Check request headers
    if (!userId) {
      const headerUserId = request.headers.get('X-User-Id');
      if (headerUserId && headerUserId !== '') {
        userId = headerUserId;
        console.log('Got user ID from header:', userId);
      }
    }
    
    // Method 4: Check request body
    if (!userId && bodyUserId) {
      userId = bodyUserId;
      console.log('Got user ID from body:', userId);
    }
    
    if (!userId) {
      // For anonymous saves, use session ID or timestamp
      userId = `anon-${Date.now()}`;
      console.log('Using anonymous user ID:', userId);
    } else {
      console.log('Saving surface repo for authenticated user:', userId);
    }

    const body = await request.json();
    const { data, userId: bodyUserId } = body;
    
    console.log('Save request received:', {
      userId,
      dataKeys: data ? Object.keys(data) : [],
      hasSkills: data?.skills?.length || 0,
      hasExperience: data?.experience?.length || 0
    });
    
    // Check if user profile exists
    const existing = await sql`
      SELECT id FROM user_profiles 
      WHERE user_id = ${userId}
      LIMIT 1
    `;

    if (existing.rows.length > 0) {
      // Update existing
      console.log('Updating existing profile for user:', userId);
      const updateResult = await sql`
        UPDATE user_profiles 
        SET surface_repo = ${JSON.stringify(data)},
            updated_at = NOW()
        WHERE user_id = ${userId}
        RETURNING user_id, updated_at
      `;
      console.log('Update result:', updateResult.rows);
    } else {
      // Create new
      console.log('Creating new profile for user:', userId);
      const insertResult = await sql`
        INSERT INTO user_profiles (
          user_id, 
          surface_repo, 
          working_repo, 
          personal_repo, 
          deep_repo,
          created_at,
          updated_at
        ) VALUES (
          ${userId},
          ${JSON.stringify(data)},
          '{}',
          '{}',
          '{}',
          NOW(),
          NOW()
        )
        RETURNING user_id, created_at
      `;
      console.log('Insert result:', insertResult.rows);
    }

    // Verify the save by reading it back
    const verify = await sql`
      SELECT user_id, surface_repo, updated_at
      FROM user_profiles
      WHERE user_id = ${userId}
      LIMIT 1
    `;
    
    console.log('Save verification:', {
      found: verify.rows.length > 0,
      userId: verify.rows[0]?.user_id,
      hasData: !!verify.rows[0]?.surface_repo,
      dataSize: JSON.stringify(verify.rows[0]?.surface_repo || {}).length
    });
    
    return NextResponse.json({ 
      success: true, 
      userId,
      verified: verify.rows.length > 0,
      timestamp: new Date().toISOString()
    });
  } catch (error: any) {
    console.error('Save error:', error);
    return NextResponse.json({ 
      error: error.message || 'Failed to save' 
    }, { status: 500 });
  }
}