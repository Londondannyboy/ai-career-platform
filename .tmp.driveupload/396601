import { NextRequest, NextResponse } from 'next/server';
import { query } from '@/lib/database/neon';

export async function GET(request: NextRequest) {
  try {
    console.log('üîç Checking database schema...');

    // Check all tables
    const tablesResult = await query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name;
    `);

    const tables = tablesResult.rows.map((row: any) => row.table_name);
    console.log('üìä Found tables:', tables);

    let schemas = {};

    // Get schema for each table
    for (const tableName of tables) {
      try {
        const schemaResult = await query(`
          SELECT column_name, data_type, is_nullable, column_default
          FROM information_schema.columns 
          WHERE table_name = $1 
          ORDER BY ordinal_position;
        `, [tableName]);
        schemas[tableName] = schemaResult.rows;
      } catch (err) {
        schemas[tableName] = { error: err.message };
      }
    }

    // Test specific tables we need
    let testResults = {};

    // Test users table
    try {
      const usersTest = await query('SELECT COUNT(*) as count FROM users LIMIT 1');
      testResults.users = { exists: true, count: usersTest.rows[0]?.count || 0 };
    } catch (err) {
      testResults.users = { exists: false, error: err.message };
    }

    // Test user_skills table  
    try {
      const skillsTest = await query('SELECT COUNT(*) as count FROM user_skills LIMIT 1');
      testResults.user_skills = { exists: true, count: skillsTest.rows[0]?.count || 0 };
    } catch (err) {
      testResults.user_skills = { exists: false, error: err.message };
    }

    return NextResponse.json({
      success: true,
      debug: {
        tables,
        schemas,
        testResults
      }
    });

  } catch (error) {
    console.error('‚ùå Schema debug error:', error);
    return NextResponse.json({ 
      success: false, 
      error: error instanceof Error ? error.message : String(error) 
    }, { status: 500 });
  }
}