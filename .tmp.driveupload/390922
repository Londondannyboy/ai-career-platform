# Quest Repository Structure v2 - Simplified Architecture

## Overview

Simplifying from 4 layers to 3 layers for clearer data organization and better user understanding.

## New Structure (3 Layers)

### 1. Surface Repo (Public)
**Purpose**: Professional profile visible to the world
**Privacy**: Public by default, user controls visibility

**Contents**:
- Basic profile information (name, headline, location)
- Work experiences (past and current only)
- Skills and endorsements
- Education and certifications
- Professional summary/bio
- Public achievements

**Similar to**: LinkedIn profile
**URL**: `/profile/[username]` (public view)

### 2. Personal Repo (Private)
**Purpose**: Private career planning and personal development
**Privacy**: Private by default, user can selectively share

**Contents**:
- Future career aspirations
- Personal OKRs and goals
- Task management and progress tracking
- Private notes and reflections
- Salary expectations and negotiations
- Interview preparation
- Personal development plans
- Skills to develop

**Unique to Quest**: Future experiences and aspirations
**URL**: `/repo/personal` (private dashboard)

### 3. Deep Repo (System)
**Purpose**: System-generated insights and core identity
**Privacy**: System-managed, encrypted

**Contents**:
- Trinity (Quest, Service, Pledge)
- AI-generated insights and patterns
- Behavioral analytics
- Voice coaching transcripts
- Recommendation algorithms
- Skill embeddings and relationships
- Career trajectory predictions

**Not directly editable**: Generated by system
**URL**: System use only

## Migration from 4-Layer to 3-Layer

### Old Structure → New Structure
1. **Surface Layer** → Surface Repo (unchanged)
2. **Working Layer** → Merged into Personal Repo
3. **Personal Layer** → Merged into Personal Repo  
4. **Deep Layer** → Deep Repo (renamed for clarity)

### Key Changes
- Working + Personal layers combined for simplicity
- Clearer naming: "Repo" instead of "Layer"
- Better separation of public/private/system data

## Implementation Plan

### Phase 1: Database Schema Update
```sql
-- Rename columns
ALTER TABLE user_profiles 
  RENAME COLUMN surface_layer TO surface_repo,
  RENAME COLUMN working_layer TO personal_repo, -- Merge working into personal
  RENAME COLUMN personal_layer TO personal_repo, -- Merge personal into same
  RENAME COLUMN deep_layer TO deep_repo;
```

### Phase 2: API Endpoint Updates
- `/api/surface-repo/*` - Public profile endpoints
- `/api/personal-repo/*` - Private planning endpoints
- `/api/deep-repo/*` - System/Trinity endpoints

### Phase 3: UI Updates
- New `/profile/[username]` public view
- Enhanced `/repo/personal` dashboard
- Simplified navigation between repos

### Phase 4: Data Migration
- Merge working_layer data into personal_repo
- Update all references in codebase
- Preserve all existing user data

## Benefits of Simplification

1. **Easier to Understand**: 3 clear purposes vs 4 overlapping layers
2. **Better Privacy Model**: Public, Private, System - simple!
3. **Cleaner URLs**: `/profile/dan` for public, `/repo/personal` for private
4. **Future-Focused**: Personal Repo explicitly includes future aspirations
5. **LinkedIn Killer**: "LinkedIn shows who you were. Quest shows who you're becoming."

## Visual Representation

```
┌─────────────────────────────────────┐
│       SURFACE REPO (Public)         │
│   • Current profile                 │
│   • Past experiences                │
│   • Public achievements             │
└─────────────────────────────────────┘
                 ↕️
┌─────────────────────────────────────┐
│      PERSONAL REPO (Private)        │
│   • Future aspirations              │
│   • Personal goals/OKRs             │
│   • Career planning                 │
└─────────────────────────────────────┘
                 ↕️
┌─────────────────────────────────────┐
│        DEEP REPO (System)           │
│   • Trinity identity                │
│   • AI insights                     │
│   • Behavioral patterns             │
└─────────────────────────────────────┘
```

## Next Steps

1. Update database schema
2. Refactor API endpoints
3. Build public profile view
4. Enhance personal dashboard
5. Create migration script
6. Update documentation

---

**Created**: December 11, 2025
**Status**: Ready for implementation
**Priority**: High - foundational change